from collections.abc import Sequence

import numpy as np

import openpyxl


def xlread_by_name(wb, name):
    C = [wb[title][coord] for title, coord in wb.defined_names[name].destinations][0]
    
    # Handle one cell.
    if not isinstance(C, Sequence):
        return C.value
    
    # Handle 1 column.
    if len(C) == 1:
        V = []
        r0, c0 = C[0][0].row, C[0][0].col_idx
        for j, Cj in enumerate(C[0]):
            assert Cj.row == r0 and Cj.col_idx == c0 + j
            V.append(Cj.value)
        return V
    
    # Handle 1 row.
    if all(len(Ci) == 1 for Ci in C):
        V = []
        r0, c0 = C[0][0].row, C[0][0].col_idx
        for i, Ci in enumerate(C):
            assert Ci[0].row == r0 + i and Ci[0].col_idx == c0
            V.append(Ci[0].value)
        return V
    
    # Handle n by m matrix (n, m > 1)
    m = len(C[0])
    if all(len(Ci) == m for Ci in C):
        V = []
        r0, c0 = C[0][0].row, C[0][0].col_idx
        for i, Ci in enumerate(C):
            V.append([])
            for j, Cij in enumerate(Ci):
                assert Cij.row == r0 + i and Cij.col_idx == c0 + j
                V[-1].append(Cij.value)
        return V
    
    return C


def read_problem_from_xlsx(path):
    wb = openpyxl.load_workbook(path, data_only=True)
    
    m = xlread_by_name(wb, '_m')
    L = xlread_by_name(wb, '_L')
    n = xlread_by_name(wb, '_n')
    
    D = xlread_by_name(wb, '_1D')
    C = np.array_split(xlread_by_name(wb, '_C'), np.cumsum(L)[:-1])
    E = np.array_split(xlread_by_name(wb, '_E'), np.cumsum(L)[:-1])
    R = np.array_split(xlread_by_name(wb, '_R'), np.cumsum(L)[:-1])
    
    H = xlread_by_name(wb, '_1H')
    T = xlread_by_name(wb, '_T')
    W = np.array_split(xlread_by_name(wb, '_W'), np.cumsum(L)[:-1])
    
    S = np.transpose(xlread_by_name(wb, '_S'))
    O = np.array_split(xlread_by_name(wb, '_O'), np.cumsum(L)[:-1])
    
    return m, L, n, D, C, E, R, H, T, W, S, O


def test_data1():
    m = 3
    L = [3,3,3]
    n = 9
    D = [400, 1000, 600, 800, 200, 300, 900, 500, 700]
#     D = [1400, 1000, 1600, 1800, 1200, 1300, 1900, 1500, 1700]
    C = [[2000, 2000, 2000], [2000, 2000, 2000], [2000, 2000, 2000]]
    E = [[[0.89, 0.89, 0.89, 1, 0.89, 0.89, 0.89, 0.89, 0.89],
        [1, 0.89, 0.89, 0.89, 0.89, 0.89, 0.89, 0.89, 1],
        [1, 0.89, 0.89, 0.89, 0.89, 0.89, 0.89, 0.89, 1]],
        [[0.91, 0.91, 0.91, 0.91, 1, 0.91, 0.91, 0.91, 0.91],
        [0.91, 1, 0.89, 0.91, 0.91, 1, 0.91, 0.89, 0.91],
        [0.91, 1, 0.91, 0.91, 1, 0.91, 0.91, 0.91, 0.91]],
        [[0.87, 0.87, 0.87, 0.87, 0.87, 0.87, 1, 0.87, 0.87],
        [0.87, 0.87, 1, 0.87, 0.87, 0.87, 1, 0.87, 0.87],
        [0.87, 0.87, 1, 0.87, 0.87, 0.87, 0.87, 0.87, 0.87]]]
    R = [[0.72, 0.72, 0.72], [0.79, 0.79, 0.79], [0.68, 0.68, 0.68]]
    H = [1.25, 1, 0.83, 0.94, 1.25, 1.33, 1, 0.8, 0.93]
    T = [0.035, 0.020, 0.041]
    w = [[[3.75, 3, 2.5, 2.81, 2.79, 4, 3, 2.4, 2.79], 
          [3.75, 3, 2.5, 2.81, 3.75, 4, 3, 2.4, 2.79], 
          [3.75, 3, 2.5, 2.81, 3.75, 4, 3, 2.4, 2.79]], 
         [[5.14, 4.11, 3.43, 3.86, 3.82, 5.48, 4.11, 3.29, 3.82], 
          [5.14, 4.11, 3.43, 3.86, 5.14, 5.48, 4.11, 3.29, 3.82],
          [5.14, 4.11, 3.43, 3.86, 5.14, 5.48, 4.11, 3.29, 3.82]], 
         [[3.20, 2.56, 2.13, 2.4, 2.38, 3.41, 2.56, 2.05, 2.38],
          [3.20, 2.56, 2.13, 2.4, 3.2, 3.41, 2.56, 2.05, 2.38],
          [3.20, 2.56, 2.13, 2.4, 3.2, 3.41, 2.56, 2.05, 2.38]]]
    s = [[0, 0.37, 0.62, 0, 1.87, 1.24, 0.41, 0.75, 0], 
         [0.93, 0, 0.62, 0.47, 0, 0, 0.41, 0.75, 0.53], 
         [0.93, 0.37, 0, 0.47, 1.87, 1.24, 0, 0.75, 0.53]]
    o = [[0.004]*10,
         [0.005]*4,
         [0.003]*8]
    
    return m, L, n, D, C, E, R, H, T, w, s, o

def test_data2():
    m = 3
    L = [10,4,8]
    n = 15
    D = [ 8000, 6000, 3600 ,8500 ,2200 ,2300 ,2900 ,2500 ,1200 ,900 ,700 ,500 ,100 ,200 ,300]
#     D = [ 8000, 6000, 3600 ,8500 ,2200 ,2300 ,2900 ,2500 ,1200 ,900 ,700 ,1500 ,100 ,3200 ,300]

    C = [[2000]*10, [2000]*4, [2000]*8]
    E = [[[1    ,0.89    ,0.89    ,0.89    ,0.89    ,1    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,1],
          [0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,1    ,0.89    ,0.89    ,1    ,0.89    ,0.89    ,0.89    ,0.89],
          [0.89    ,0.89    ,0.89    ,1    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89],
          [0.89    ,0.89    ,0.89    ,1    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,1    ,0.89    ,0.89],
          [0.89    ,1    ,1    ,0.89    ,0.89    ,0.89    ,1    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,1    ,0.89    ,0.89],
          [0.89    ,1    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,1    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,1],
          [0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,1    ,0.89    ,0.89    ,1    ,0.89    ,0.89    ,0.89],
          [0.89    ,0.89    ,1    ,0.89    ,0.89    ,0.89    ,1    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,1    ,0.89],
          [1    ,0.89    ,0.89    ,0.89    ,1    ,0.89    ,0.89    ,1    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89],
          [1    ,0.89    ,0.89    ,0.89    ,1    ,1    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89    ,0.89]],
         [[0.91    ,1    ,0.91    ,1    ,0.91    ,0.91    ,1    ,0.91    ,0.91    ,0.91    ,0.91    ,0.91    ,1    ,0.91    ,0.91],
          [1    ,0.91    ,1    ,0.91    ,1    ,1    ,0.91    ,1    ,0.91    ,0.91    ,1    ,0.91    ,0.91    ,0.91    ,0.91],
          [1    ,0.91    ,1    ,0.91    ,1    ,0.91    ,0.91    ,0.91    ,1    ,0.91    ,0.91    ,0.91    ,1    ,0.91    ,0.91],
          [0.91    ,1    ,0.91    ,1    ,0.91    ,0.91    ,0.91    ,1    ,0.91    ,0.91    ,0.91    ,1    ,0.91    ,0.91    ,0.91]],
         [[0.87    ,0.87    ,1    ,0.87    ,0.87    ,0.87    ,0.87    ,0.87    ,1    ,0.87    ,0.87    ,0.87    ,0.87    ,0.87    ,1],
          [1    ,0.87    ,0.87    ,0.87    ,0.87    ,0.87    ,0.87    ,0.87    ,0.87    ,0.87    ,1    ,0.87    ,0.87    ,0.87    ,0.87],
          [0.87    ,0.87    ,1    ,0.87    ,0.87    ,0.87    ,0.87    ,1    ,0.87    ,0.87    ,0.87    ,0.87    ,1    ,0.87    ,0.87],
          [0.87    ,0.87    ,0.87    ,0.87    ,1    ,0.87    ,0.87    ,0.87    ,0.87    ,1    ,0.87    ,0.87    ,0.87    ,0.87    ,0.87],
          [0.87    ,1    ,0.87    ,0.87    ,0.87    ,1    ,0.87    ,0.87    ,0.87    ,0.87    ,0.87    ,1    ,0.87    ,0.87    ,0.87],
          [0.87    ,0.87    ,0.87    ,1    ,0.87    ,0.87    ,1    ,0.87    ,0.87    ,0.87    ,0.87    ,1    ,0.87    ,0.87    ,0.87],
          [1    ,0.87    ,0.87    ,0.87    ,0.87    ,0.87    ,0.87    ,0.87    ,1    ,1    ,0.87    ,0.87    ,0.87    ,0.87    ,0.87],
          [0.87    ,0.87    ,1    ,0.87    ,0.87    ,1    ,0.87    ,0.87    ,0.87    ,0.87    ,0.87    ,0.87    ,0.87    ,0.87    ,1]]]

    R = [[0.72]*10, [0.79]*4, [0.68]*8]
    H = [1.25 ,1.05 ,0.83 ,0.94 ,1.25 ,1.33 ,1.00 ,0.80,0.93 ,0.85 ,0.90 ,1.15 ,1.00 ,0.95 ,1.12 ]
    T = [0.035, 0.020, 0.041]
    w = [[[3.75,    3.15,    2.49,    2.82,    3.75,    3.99,    3.00,    2.40,    2.79,    2.55,    2.70,    3.45,    3.00,    2.85,    3.35],
          [3.75,    3.15,    2.49,    2.82,    3.75,    3.99,    3.00,    2.40,    2.79,    2.55,    2.70,    3.45,    3.00,    2.85,    3.35],
          [3.75,    3.15,    2.49,    2.82,    3.75,    3.99,    3.00,    2.40,    2.79,    2.55,    2.70,    3.45,    3.00,    2.85,    3.35],
          [3.75,    3.15,    2.49,    2.82,    3.75,    3.99,    3.00,    2.40,    2.79,    2.55,    2.70,    3.45,    3.00,    2.85,    3.35],
          [3.75,    3.15,    2.49,    2.82,    3.75,    3.99,    3.00,    2.40,    2.79,    2.55,    2.70,    3.45,    3.00,    2.85,    3.35],
          [3.75,    3.15,    2.49,    2.82,    3.75,    3.99,    3.00,    2.40,    2.79,    2.55,    2.70,    3.45,    3.00,    2.85,    3.35],
          [3.75,    3.15,    2.49,    2.82,    3.75,    3.99,    3.00,    2.40,    2.79,    2.55,    2.70,    3.45,    3.00,    2.85,    3.35],
          [3.75,    3.15,    2.49,    2.82,    3.75,    3.99,    3.00,    2.40,    2.79,    2.55,    2.70,    3.45,    3.00,    2.85,    3.35],
          [3.75,    3.15,    2.49,    2.82,    3.75,    3.99,    3.00,    2.40,    2.79,    2.55,    2.70,    3.45,    3.00,    2.85,    3.35],
          [3.75,    3.15,    2.49,    2.82,    3.75,    3.99,    3.00,    2.40,    2.79,    2.55,    2.70,    3.45,    3.00,    2.85,    3.35]],
         [[5.14,    4.32,    3.42,    3.87,    5.14,    5.47,    4.11,    3.29,    3.82,    3.50,    3.70,    4.73,    4.11,    3.91,    4.59],
          [5.14,    4.32,    3.42,    3.87,    5.14,    5.47,    4.11,    3.29,    3.82,    3.50,    3.70,    4.73,    4.11,    3.91,    4.59],
          [5.14,    4.32,    3.42,    3.87,    5.14,    5.47,    4.11,    3.29,    3.82,    3.50,    3.70,    4.73,    4.11,    3.91,    4.59],
          [5.14,    4.32,    3.42,    3.87,    5.14,    5.47,    4.11,    3.29,    3.82,    3.50,    3.70,    4.73,    4.11,    3.91,    4.59]],
         [[3.20,    2.69,    2.13,    2.41,    3.20,    3.41,    2.56,    2.05,    2.38,    2.18,    2.30,    2.94,    2.56,    2.43,    2.86],
          [3.20,    2.69,    2.13,    2.41,    3.20,    3.41,    2.56,    2.05,    2.38,    2.18,    2.30,    2.94,    2.56,    2.43,    2.86],
          [3.20,    2.69,    2.13,    2.41,    3.20,    3.41,    2.56,    2.05,    2.38,    2.18,    2.30,    2.94,    2.56,    2.43,    2.86],
          [3.20,    2.69,    2.13,    2.41,    3.20,    3.41,    2.56,    2.05,    2.38,    2.18,    2.30,    2.94,    2.56,    2.43,    2.86],
          [3.20,    2.69,    2.13,    2.41,    3.20,    3.41,    2.56,    2.05,    2.38,    2.18,    2.30,    2.94,    2.56,    2.43,    2.86],
          [3.20,    2.69,    2.13,    2.41,    3.20,    3.41,    2.56,    2.05,    2.38,    2.18,    2.30,    2.94,    2.56,    2.43,    2.86],
          [3.20,    2.69,    2.13,    2.41,    3.20,    3.41,    2.56,    2.05,    2.38,    2.18,    2.30,    2.94,    2.56,    2.43,    2.86],
          [3.20,    2.69,    2.13,    2.41,    3.20,    3.41,    2.56,    2.05,    2.38,    2.18,    2.30,    2.94,    2.56,    2.43,    2.86]]]
    s = [[0, 19600, 19600, 0, 19600, 19600, 19600, 19600, 0, 19600, 19600, 0, 19600, 19600, 19600], 
         [19600, 0, 19600, 19600, 0, 0, 19600, 19600, 19600, 0, 0, 19600, 19600, 0, 0], 
         [19600, 19600, 0, 19600, 19600, 19600, 0, 0, 19600, 19600, 19600, 19600, 0, 19600, 19600]]
    y = [[1, 0, 0, 1, 0, 0, 0, 0, 1], 
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 1, 0, 1, 1, 1, 1, 0]]
    o = [[0.004]*10,
         [0.005]*4,
         [0.003]*8]
    
    return m, L, n, D, C, E, R, H, T, w, s, o, y


def test():
    pb = read_problem_from_xlsx('data/base.xlsx')
    print(pb)


if __name__ == '__main__':
    test()

